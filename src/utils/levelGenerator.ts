import { ColoredRegion, GameCell } from '../types/game';
import { Colors } from '../constants/Colors';

/**
 * G√©n√®re des r√©gions color√©es pour un plateau de taille donn√©e
 * Cette impl√©mentation cr√©e des r√©gions simples pour le POC
 */
export function generateColoredRegions(gridSize: number): ColoredRegion[] {
  const regions: ColoredRegion[] = [];
  
  console.log(`üé≤ Generating regions for ${gridSize}x${gridSize} grid`);
  
  // Pour le POC, chaque r√©gion est une rang√©e horizontale
  // Cela garantit exactement gridSize r√©gions pour une grille gridSize√ógridSize
  for (let row = 0; row < gridSize; row++) {
    const region: ColoredRegion = {
      id: row,
      color: Colors.regions[row % Colors.regions.length],
      cells: [],
      hasQueen: false
    };
    
    // Ajouter toutes les cellules de cette rang√©e √† la r√©gion
    for (let col = 0; col < gridSize; col++) {
      region.cells.push({ row, col });
    }
    
    regions.push(region);
    console.log(`‚úÖ Created region ${row} with ${region.cells.length} cells`);
  }
  
  console.log(`üèÅ Generated ${regions.length} regions total`);
  return regions;
}

/**
 * G√©n√®re des r√©gions plus complexes (pour versions futures)
 */
export function generateAdvancedRegions(gridSize: number): ColoredRegion[] {
  // TODO: Impl√©menter un algorithme plus sophistiqu√© pour cr√©er
  // des r√©gions de formes irr√©guli√®res mais √©quilibr√©es
  return generateColoredRegions(gridSize);
}

/**
 * Initialise un plateau vide avec les r√©gions color√©es
 */
export function initializeBoard(gridSize: number, regions: ColoredRegion[]): GameCell[][] {
  const board: GameCell[][] = [];
  
  // Cr√©er un mapping rapide r√©gion -> couleur
  const regionMap = new Map<string, { id: number; color: string }>();
  regions.forEach(region => {
    region.cells.forEach(cell => {
      regionMap.set(`${cell.row}-${cell.col}`, {
        id: region.id,
        color: region.color
      });
    });
  });
  
  // Initialiser le plateau - EXACTEMENT gridSize √ó gridSize
  for (let row = 0; row < gridSize; row++) {
    board[row] = [];
    for (let col = 0; col < gridSize; col++) {
      const regionInfo = regionMap.get(`${row}-${col}`);
      
      board[row][col] = {
        row,
        col,
        regionId: regionInfo?.id ?? 0,
        regionColor: regionInfo?.color ?? Colors.regions[0],
        state: 'empty',
        isHighlighted: false,
        isConflict: false
      };
    }
  }
  
  // V√©rification de s√©curit√©
  console.log(`üîç Board created: ${board.length} rows √ó ${board[0]?.length} cols`);
  if (board.length !== gridSize || board[0]?.length !== gridSize) {
    console.error(`‚ùå ERREUR: Board size incorrect! Expected ${gridSize}√ó${gridSize}, got ${board.length}√ó${board[0]?.length}`);
  }
  
  return board;
}

/**
 * G√©n√®re un niveau complet avec solution
 */
export function generateLevel(gridSize: number) {
  console.log(`üéØ Generating level for ${gridSize}√ó${gridSize} grid`);
  
  const regions = generateColoredRegions(gridSize);
  const board = initializeBoard(gridSize, regions);
  
  // V√©rifications finales
  const totalCells = board.flat().length;
  const expectedCells = gridSize * gridSize;
  
  console.log(`üìä Level stats: ${regions.length} regions, ${totalCells} cells (expected: ${expectedCells})`);
  
  if (totalCells !== expectedCells) {
    console.error(`‚ùå ERREUR: Nombre de cellules incorrect!`);
  }
  
  if (regions.length !== gridSize) {
    console.error(`‚ùå ERREUR: Nombre de r√©gions incorrect! Expected ${gridSize}, got ${regions.length}`);
  }
  
  return {
    board,
    regions,
    gridSize,
    queensPlaced: 0,
    queensRequired: gridSize, // Exactement gridSize reines n√©cessaires
    isCompleted: false,
    moveCount: 0
  };
}